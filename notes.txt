NetNinja - React & Redux

Core Purpose:
JS Library that renders COMPONENTS the DOM dynamically. Manages and REACTS to STATE
Components combined, creates JS representation called Virtual DOM.  Updates changes dynamically based on changes.
STATE triggers updates.

Two part:
React
ReactDOM

class App extents React.Component {
  state = {
    name: 'Taddes',
    age: 30
  }
  render(){
    return{
      <p>YO {this.state.name} I am {this.state.age}</p>
    }
  }
}

Default root render :   ReactDOM.render(<App />, document.getElementById('app'))

5. STATE
State of the data in the UI and can be updated
State is most often an object with items of key value pairs of properties and values (local data).
Storing local data of that given Component.
State updates to reflect a triggered change, output dynamically.
Similar to data() property in Vue component

7. DOM Events

Changing State updates the dom, re-renders it to DOM
Reference functions(methods) above render() and then reference this.methodName as a registered Events
-React has lots of pre-built event handlers. All can access the e 'event' object as is standard with normal JS

handleClick(e){
  console.log(e.target)
}

render(
   <button onClick={this.handleClick}>Click Me</button>
)

8. Changing State and 'this'
-Context of this is from how/where it is called, not where it sits (not always what you'd expect)
-Old react versions bound 'this' to component instance of our functions, but this has been removed (class components)
-Therefore, must manually bind this context to functions
-in render(), this is automatically bound-
-reaction to DOM events is not bound.
**easiest solution: USE AN ARROW FUNCTION!

-ARROW FUNCTIONS bind the value of this to whatever the value of this is outside the function (within the class component instance)

-DONT EVER JUST CHANGE STATE DIRECTLY Ex. this.state.name = 'Name'
Use .setState method

9. User Input and Forms

-best to use onSubmit, as it covers a click or enter for form submission!
Chain onSubmit into the <form>, not submission button! Better practice.

10. Create React App
-A CLI tool to create React apps
  -Dev server
  -ES6 features that are not normally supported in browsers
  -Keep our code modular
  -Access to build tools to create optimized code for deployment


11. SPA - Single Page Applications
-React apps are typically SPAs
-Only ever on ehTML page served to browsers
-React controls what a user sees on page

By contrast, a typical multi page app requires multiple requests to server to
serve up other pages.

SPA's still make the initial request, but by contrast, react takes over the app once 
the index is delivered. All requests are handled by React, rendering different components.
Saves us trips from client to server and back again. 

Public folder contains the contents that will be served up when requested by server. Initial Index file

SRC folder is the container for all relevant components:

  -App.js holds the root <App /> component
  class App extends Component {
  render() {
    return (
      <div className="App">
        <header className="App-header">
          <img src={logo} className="App-logo" alt="logo" />
          <p>Edit <code>src/App.js</code> and save to reload.</p>
          <a>Learn React</a>
        </header>
      </div>
    );
  }
}
export default App;

  -index.js:
    Pulls in the root component, React and ReactDOM, Renders the App to given 'root' id
    import React from 'react';
    import ReactDOM from 'react-dom';
    import './index.css';
    import App from './App';
    import * as serviceWorker from './serviceWorker';

  ReactDOM.render(<App />, document.getElementById('root'));

  -To Run local dev server: npm start

  12. Nesting Components
  <App /> is root, top of triggered

  Subsequent components nest within in, and other components can nest within one another
  -Point of this is to have as much modularity as possible

  13. PROPS 
  -PAss data from one parent component to another child component
  -Props simply defined within JSX tags of a component <Class name="propName" /> and can be
  accessed by the this.props property.  Returns object of defined props
  **Destructured shorthand a great way to grab props and assign to a value
  const {name, rank, race} = this.props

  Remember: pass data from parent to child!!!!

  14. Output Lists -> Cycle through values dynamically
  -unique keys needed when React updates keys.  Especially when dealing with data that is the same or similar, a unique key that is specific to that element, deleting it from state is certian and efficient.

Best to have your items in state object to have their own key
Ex.  state = {
    crew: [
      {name: 'James T. Kirk', rank: 'Captain', race: 'Human', id: 1},
      {name: 'Spock', rank: 'Commander', race: 'Vulcan', id: 2},
      {name: 'Leonard H. McCoy', rank: 'Doctor', race: 'Human', id: 3}
    ]
  }
** MATCH PROPERTY NAME
  key={crew.id}
**

15. Stateless Components

-Container Components/ Class-Based Components:
  -Contain state
  -Contain lifecycle hooks (how/when stuff happens)
  ->can go out, grab data, store in state, next components within them 
  -Not concerned with UI
  -Use classes to create

-UI components/ Stateless/ Functional Components
  -Don't contain state
  -Recieve data from props
  -Only concerned with UI
  -Use functions to create

Functional comps
Don't need render method
Arent' class based

**Props aren't automatically passed in as they are with class-based components. Therfore, pass them in as a param

import React from 'react';

const Crew = (props) => {
  const {crew} = this.props;
  const crewList = crew.map(crewMember => {
    return(
      <div className="crew" key={crewMember.id}>
      <div>Name: {crewMember.name }</div>
      <div>Rank: {crewMember.rank}</div>
      <div>Race: {crewMember.race}</div>
    </div>
    )
  })
    return (
      <div className="crew-list">
      { crewList }
      </div>
    )
  }

  17. Forms
  