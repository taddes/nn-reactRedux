NetNinja - React & Redux

Core Purpose:
JS Library that renders COMPONENTS the DOM dynamically. Manages and REACTS to STATE
Components combined, creates JS representation called Virtual DOM.  Updates changes dynamically based on changes.
STATE triggers updates.

Two part:
React
ReactDOM

class App extents React.Component {
  state = {
    name: 'Taddes',
    age: 30
  }
  render(){
    return{
      <p>YO {this.state.name} I am {this.state.age}</p>
    }
  }
}

Default root render :   ReactDOM.render(<App />, document.getElementById('app'))

5. STATE
State of the data in the UI and can be updated
State is most often an object with items of key value pairs of properties and values (local data).
Storing local data of that given Component.
State updates to reflect a triggered change, output dynamically.
Similar to data() property in Vue component

7. DOM Events

Changing State updates the dom, re-renders it to DOM
Reference functions(methods) above render() and then reference this.methodName as a registered Events
-React has lots of pre-built event handlers. All can access the e 'event' object as is standard with normal JS

handleClick(e){
  console.log(e.target)
}

render(
   <button onClick={this.handleClick}>Click Me</button>
)

8. Changing State and 'this'

